generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid()) @db.Uuid
  name         String
  email        String         @unique
  password     String
  GymClient    GymClient[]
  Subscription Subscription[] @relation("SubscriptionToUser")

  @@map("users")
}

model GymClient {
  id                      String          @id @default(uuid()) @db.Uuid
  name                    String
  email                   String          @unique
  phone                   String
  status                  GymClientStatus
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  inactiveAt              DateTime?
  ownerId                 String          @db.Uuid
  subscriptionId          String          @db.Uuid
  paymentStatus           PaymentStatus?
  subscriptionLastPayment DateTime?
  taxId                   String
  abacatePayCustomerId    String?
  user                    User            @relation(fields: [ownerId], references: [id])
  Subscription            Subscription    @relation(fields: [subscriptionId], references: [id])
  Payment                 Payment[]

  @@map("gym_clients")
}

model Subscription {
  id        String             @id @default(uuid()) @db.Uuid
  name      String
  price     Float
  status    SubscriptionStatus
  startDate DateTime
  endDate   DateTime
  clientId  String?            @db.Uuid
  userId    String             @db.Uuid
  GymClient GymClient[]
  Payment   Payment[]
  User      User[]             @relation("SubscriptionToUser")

  @@map("subscriptions")
}

model Payment {
  id             String        @id @default(uuid()) @db.Uuid
  clientId       String        @db.Uuid
  subscriptionId String        @db.Uuid
  amount         Float
  status         PaymentStatus
  paymentDate    DateTime      @default(now())
  GymClient      GymClient     @relation(fields: [clientId], references: [id])
  Subscription   Subscription  @relation(fields: [subscriptionId], references: [id])

  @@map("payments")
}

enum GymClientStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PaymentStatus {
  PAID
  PENDING
  UNPAID
}
